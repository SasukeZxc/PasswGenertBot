import logging
import random
import asyncio
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    InputMediaPhoto
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)
import sqlite3
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('ratings.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ratings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            rating INTEGER,
            timestamp DATETIME
        )
    ''')
    conn.commit()
    conn.close()

init_db()

BOT_TOKEN = 'YOUR-BOT-TOKEN'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
TEXTS = {
    "ru": {
        "main_menu": "üåü <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "compliment_btn": "ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å",
        "fact_btn": "üß† –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç",
        "rate_btn": "‚≠ê –û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞",
        "help_btn": "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
        "compliment_title": "ü§ñ –í–∞—à –ø–∞—Ä–æ–ª—å:",
        "fact_title": "üß† <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>",
        "rate_title": "‚≠ê <b>–û—Ü–µ–Ω–∏—Ç–µ –±–æ—Ç–∞:</b>",
        "thanks_rating": "üôè <b>–°–ø–∞—Å–∏–±–æ –∑–∞ {stars} –æ—Ü–µ–Ω–∫—É!</b>",
        "help_text": (
            "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–¥–Ω–∏–º–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!\n\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ <b>ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ <b>–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç</b> –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
            "‚Ä¢ –û—Ü–µ–Ω–∏—Ç–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!\n"
            "‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –±–æ—Ç–∞: {average_rating:.1f} ‚≠ê (–Ω–∞ –æ—Å–Ω–æ–≤–µ {rating_count} –æ—Ü–µ–Ω–æ–∫)\n"
            "‚Ä¢ –ë–æ—Ç –∑–∞—â–∏—â–µ–Ω Apache License: https://www.apache.org/licenses/LICENSE-2.0\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ @Girlanda228"
        ),
        "back_btn": "üîô –ù–∞–∑–∞–¥",
        "choose_language": "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:</b>",
        "language_select": "üá∑üá∫ –†—É—Å—Å–∫–∏–π"
    },
    "en": {
        "main_menu": "üåü <b>Main Menu</b> üåü\n\nChoose an action:",
        "compliment_btn": "ü§ñ Generate password",
        "fact_btn": "üß† Random fact",
        "rate_btn": "‚≠ê Rate bot",
        "help_btn": "‚ÑπÔ∏è Help",
        "compliment_title": "ü§ñ <b>Your password:</b>",
        "fact_title": "üß† <b>Interesting fact:</b>",
        "rate_title": "‚≠ê <b>Rate the bot:</b>",
        "thanks_rating": "üôè <b>Thank you for {stars} rating!</b>",
        "help_text": (
            "‚ÑπÔ∏è <b>Help</b>\n\n"
            "This bot was created to cheer you up!\n\n"
            "‚Ä¢ Click <b>ü§ñ Generate password</b> to get a random password\n"
            "‚Ä¢ Select <b>Random fact</b> for interesting information\n"
            "‚Ä¢ Rate the bot if you liked it!\n"
            "‚Ä¢ Average bot rating: {average_rating:.1f} ‚≠ê (based on {rating_count} ratings)\n"
            "‚Ä¢ Bot protected by Apache License: https://www.apache.org/licenses/LICENSE-2.0\n"
            "‚Ä¢ Bot creator @Girlanda228"
        ),
        "back_btn": "üîô Back",
        "choose_language": "üåç <b>Choose language:</b>",
        "language_select": "üá¨üáß English"
    }
}

# –°–ø–∏—Å–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
chars = '+-/*!&$#?=@<>abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'

FACTS = {
    "ru": [
        "ü¶à –ê–∫—É–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–æ–ª—å—à–µ, —á–µ–º –¥–µ—Ä–µ–≤—å—è! (400 –º–ª–Ω –ª–µ—Ç)",
        "üçØ –ú—ë–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è ‚Äì –∞—Ä—Ö–µ–æ–ª–æ–≥–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ —Å—ä–µ–¥–æ–±–Ω—ã–π –º—ë–¥ –≤–æ–∑—Ä–∞—Å—Ç–æ–º 3000 –ª–µ—Ç!",
        "üêß –ü–∏–Ω–≥–≤–∏–Ω—ã –º–æ–≥—É—Ç –ø—Ä—ã–≥–∞—Ç—å –¥–æ 2 –º–µ—Ç—Ä–æ–≤ –≤ –≤—ã—Å–æ—Ç—É!",
        "üåô –ù–∞ –õ—É–Ω–µ –µ—Å—Ç—å –∑–∞–ø–∞—Ö... –∂–∞—Ä–µ–Ω–æ–≥–æ –º—è—Å–∞ (–ø–æ —Å–ª–æ–≤–∞–º –∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç–æ–≤)!",
        "ü¶∑ –ó—É–±–Ω–∞—è —ç–º–∞–ª—å ‚Äî —Å–∞–º–∞—è —Ç–≤–µ—Ä–¥–∞—è —Ç–∫–∞–Ω—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ!",
        "üêå –£ —É–ª–∏—Ç–æ–∫ –æ–∫–æ–ª–æ 25 000 –∑—É–±–æ–≤!",
        "üï∑Ô∏è –ü–∞—É–∫–∏ –º–æ–≥—É—Ç —Ö–æ–¥–∏—Ç—å –ø–æ –≤–æ–¥–µ –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–º—É –Ω–∞—Ç—è–∂–µ–Ω–∏—é!",
        "üçå –ë–∞–Ω–∞–Ω—ã ‚Äî —ç—Ç–æ —è–≥–æ–¥—ã, –∞ –∫–ª—É–±–Ω–∏–∫–∞ ‚Äî –Ω–µ—Ç!",
        "ü¶í –£ –∂–∏—Ä–∞—Ñ–æ–≤ –∏ –ª—é–¥–µ–π –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–µ–π–Ω—ã—Ö –ø–æ–∑–≤–æ–Ω–∫–æ–≤ ‚Äî 7!",
        "‚òï –ö–æ—Ñ–µ–∏–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —É–∂–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è!",
        "ü¶¥ –†–µ–±–µ–Ω–æ–∫ —Ä–æ–∂–¥–∞–µ—Ç—Å—è —Å 270 –∫–æ—Å—Ç—è–º–∏, –∞ —É –≤–∑—Ä–æ—Å–ª–æ–≥–æ –∏—Ö –≤—Å–µ–≥–æ 206!",
        "üêù –ü—á–µ–ª—ã –æ–±—â–∞—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —Ç–∞–Ω—Ü–∞!",
        "üåä –û–∫–µ–∞–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç 99% –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –Ω–∞ –ó–µ–º–ª–µ!",
        "ü¶á –õ–µ—Ç—É—á–∏–µ –º—ã—à–∏ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ, —Å–ø–æ—Å–æ–±–Ω—ã–µ –∫ –ø–æ–ª–µ—Ç—É!",
        "üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –º–æ—â–Ω–µ–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö—Å—è –¥–ª—è –ø–æ–ª–µ—Ç–∞ –Ω–∞ –õ—É–Ω—É!",
        "ü¶ú –ü–æ–ø—É–≥–∞–∏ –º–æ–≥—É—Ç –∂–∏—Ç—å –¥–æ–ª—å—à–µ –ª—é–¥–µ–π (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥—ã ‚Äî –¥–æ 80 –ª–µ—Ç)!",
        "üçé –Ø–±–ª–æ–∫–∏ –ø–ª–∞–≤–∞—é—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ 25% —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –≤–æ–∑–¥—É—Ö–∞!",
        "üöÄ –í–µ–Ω–µ—Ä–∞ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞, –≤—Ä–∞—â–∞—é—â–∞—è—Å—è –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏!",
        "ü¶ì –ó–µ–±—Ä—ã –±–µ–ª—ã–µ —Å —á–µ—Ä–Ω—ã–º–∏ –ø–æ–ª–æ—Å–∫–∞–º–∏, –∞ –Ω–µ –Ω–∞–æ–±–æ—Ä–æ—Ç!",
        "üß¨ –î–ù–ö —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ 50% —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –î–ù–ö –±–∞–Ω–∞–Ω–∞!"
    ],
    "en": [
        "ü¶à Sharks existed before trees! (400 million years)",
        "üçØ Honey never spoils - archaeologists found edible honey from 3000 years ago!",
        "üêß Penguins can jump up to 6 feet high!",
        "üåô The Moon smells like gunpowder (according to astronauts)!",
        "ü¶∑ Tooth enamel is the hardest substance in the human body!",
        "üêå Snails have about 25,000 teeth!",
        "üï∑Ô∏è Some spiders can 'sail' across water using their legs as sails!",
        "üçå Bananas are berries, but strawberries aren't!",
        "ü¶í Giraffes and humans have the same number of neck vertebrae (7)!",
        "‚òï Caffeine starts working within 10 minutes of consumption!",
        "ü¶¥ Babies are born with 270 bones, adults have only 206!",
        "üêù Honeybees communicate through 'waggle dances'!",
        "üåä The ocean contains 99% of Earth's living space!",
        "ü¶á Bats are the only mammals capable of sustained flight!",
        "üì± Your smartphone is millions of times more powerful than Apollo 11's computers!",
        "ü¶ú Some parrots can live over 80 years!",
        "üçé Apples float because they're 25% air!",
        "üöÄ Venus is the only planet that rotates clockwise!",
        "ü¶ì Zebras are white with black stripes, not black with white stripes!",
        "üß¨ Humans share 50% of their DNA with bananas!"
    ]
}

# –†–∞–∑–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
MENU_PHOTOS = {
    "ru": "https://postimg.cc/2V2kKQrd",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é —Ä—É—Å—Å–∫—É—é –≤–µ—Ä—Å–∏—é
    "en": "https://postimg.cc/q6GJ0nnT"    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é
}

# –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
LANGUAGE_PHOTO = "https://postimg.cc/BXH7Hkrt"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def save_rating(user_id: int, rating: int):
    conn = sqlite3.connect('ratings.db')
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO ratings (user_id, rating, timestamp) VALUES (?, ?, ?)',
        (user_id, rating, datetime.now().isoformat())
    )
    conn.commit()
    conn.close()

def get_average_rating():
    conn = sqlite3.connect('ratings.db')
    cursor = conn.cursor()
    cursor.execute('SELECT AVG(rating), COUNT(*) FROM ratings')
    result = cursor.fetchone()
    conn.close()
    return result or (0, 0)  # (average, count)

async def send_main_menu(chat_id, context, edit_message_id=None, lang="ru"):
    """–û—Ç–ø—Ä–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(TEXTS[lang]["compliment_btn"], callback_data=f"compliment_{lang}")],
        [InlineKeyboardButton(TEXTS[lang]["fact_btn"], callback_data=f"fact_{lang}")],
        [InlineKeyboardButton(TEXTS[lang]["rate_btn"], callback_data=f"rate_{lang}")],
        [InlineKeyboardButton(TEXTS[lang]["help_btn"], callback_data=f"help_{lang}")],
        [InlineKeyboardButton(TEXTS[lang]["language_select"], callback_data="change_language")]
    ])
    
    photo_url = MENU_PHOTOS[lang]
    
    if edit_message_id:
        await context.bot.edit_message_media(
            chat_id=chat_id,
            message_id=edit_message_id,
            media=InputMediaPhoto(media=photo_url, caption=TEXTS[lang]["main_menu"], parse_mode='HTML'),
            reply_markup=keyboard
        )
    else:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=photo_url,
            caption=TEXTS[lang]["main_menu"],
            parse_mode='HTML',
            reply_markup=keyboard
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞"""
    user = update.effective_user
    logger.info(f"User {user.id} started the bot")
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")],
        [InlineKeyboardButton("üá¨üáß English", callback_data="set_lang_en")]
    ])
    
    await update.message.reply_photo(
        photo=LANGUAGE_PHOTO,
        caption=TEXTS["ru"]["choose_language"],
        parse_mode='HTML',
        reply_markup=keyboard
    )

#async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫"""
#    query = update.callback_query
#    await query.answer()
#    
#    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
#    if query.data == "change_language":
#        keyboard = InlineKeyboardMarkup([
#            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")],
#            [InlineKeyboardButton("üá¨üáß English", callback_data="set_lang_en")]
#        ])
#        
#        current_lang = context.user_data.get("lang", "ru")
#        await query.edit_message_media(
#            media=InputMediaPhoto(
#                media=LANGUAGE_PHOTO,
#                caption=TEXTS[current_lang]["choose_language"],
#                parse_mode='HTML'
#            ),
#            reply_markup=keyboard
#        )
#        return
#    
#    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
#    if query.data.startswith("set_lang_"):
#        lang = query.data.split("_")[-1]
#        context.user_data["lang"] = lang
#        await send_main_menu(query.message.chat_id, context, query.message.message_id, lang)
#        return
#    
#    # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —è–∑—ã–∫
#    if "_" in query.data:
#        action, lang = query.data.split("_", 1)
#    else:
#        action = query.data
#        lang = context.user_data.get("lang", "ru")
#    
#    if action == "compliment":
#
#        number = 1
#        #number = int(input('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π: '))
#        lenght = 8 #int(input("–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: "))
#        
#        for n in range(number):
#            password=''
#            for n in range(lenght):
#                password += random.choice(chars)
#        if query.message.photo:
#            await query.edit_message_caption(
#                caption=f"{TEXTS[lang]['compliment_title']}\n\n{password}",
#                parse_mode='HTML'
#            )
#        else:
#            await query.edit_message_text(
#                f"{TEXTS[lang]['compliment_title']}\n\n{password}",
#                parse_mode='HTML'
#            )
#        await asyncio.sleep(3)
#        await send_main_menu(query.message.chat_id, context, query.message.message_id, lang)
#        
#    elif action == "fact":
#        fact = random.choice(FACTS[lang])
#        if query.message.photo:
#            await query.edit_message_caption(
#                caption=f"{TEXTS[lang]['fact_title']}\n\n{fact}",
#                parse_mode='HTML'
#            )
#        else:
#            await query.edit_message_text(
#                f"{TEXTS[lang]['fact_title']}\n\n{fact}",
#                parse_mode='HTML'
#            )
#        await asyncio.sleep(3)
#        await send_main_menu(query.message.chat_id, context, query.message.message_id, lang)
#        
#    elif action == "rate":
#        await show_rating_menu(query, context, lang)
#        
#    elif action == "help":
#        if query.message.photo:
#            await query.edit_message_caption(
#                caption=TEXTS[lang]["help_text"],
#                parse_mode='HTML'
#            )
#        else:
#            await query.edit_message_text(
#                TEXTS[lang]["help_text"],
#                parse_mode='HTML'
#            )
#        await asyncio.sleep(5)
#        await send_main_menu(query.message.chat_id, context, query.message.message_id, lang)
#
async def show_rating_menu(query, context, lang="ru"):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ü–µ–Ω–∫–∏"""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠ê", callback_data=f"rate1_{lang}"),
         InlineKeyboardButton("‚≠ê‚≠ê", callback_data=f"rate2_{lang}"),
         InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data=f"rate3_{lang}")],
        [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate4_{lang}"),
         InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate5_{lang}")],
        [InlineKeyboardButton(TEXTS[lang]["back_btn"], callback_data=f"back_{lang}")]
    ])
    
    if query.message.photo:
        await query.edit_message_caption(
            caption=TEXTS[lang]["rate_title"],
            parse_mode='HTML',
            reply_markup=keyboard
        )
    else:
        await query.edit_message_caption(
            TEXTS[lang]["rate_title"],
            parse_mode='HTML',
            reply_markup=keyboard
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    if query.data == "change_language":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")],
            [InlineKeyboardButton("üá¨üáß English", callback_data="set_lang_en")]
        ])
        
        current_lang = context.user_data.get("lang", "ru")
        await query.edit_message_media(
            media=InputMediaPhoto(
                media=LANGUAGE_PHOTO,
                caption=TEXTS[current_lang]["choose_language"],
                parse_mode='HTML'
            ),
            reply_markup=keyboard
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    if query.data.startswith("set_lang_"):
        lang = query.data.split("_")[-1]
        context.user_data["lang"] = lang
        await send_main_menu(query.message.chat_id, context, query.message.message_id, lang)
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —è–∑—ã–∫
    if "_" in query.data:
        action, lang = query.data.split("_", 1)
    else:
        action = query.data
        lang = context.user_data.get("lang", "ru")
    
    if action == "compliment":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª–µ–π
        await query.edit_message_caption(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<code>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª–∏–Ω–∞</code>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>3 12</code>",
            parse_mode='HTML'
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        context.user_data['waiting_for_password_params'] = True
        context.user_data['lang'] = lang
        context.user_data['message_to_edit'] = query.message.message_id
        
    elif action == "fact":
        fact = random.choice(FACTS[lang])
        if query.message.photo:
            await query.edit_message_caption(
                caption=f"{TEXTS[lang]['fact_title']}\n\n{fact}",
                parse_mode='HTML'
            )
        else:
            await query.edit_message_caption(
                f"{TEXTS[lang]['fact_title']}\n\n{fact}",
                parse_mode='HTML'
            )
        await asyncio.sleep(3)
        await send_main_menu(query.message.chat_id, context, query.message.message_id, lang)
        
    elif action == "rate":
        await show_rating_menu(query, context, lang)
        
    elif action == "help":
        if query.message.photo:
            await query.edit_message_caption(
                caption=TEXTS[lang]["help_text"],
                parse_mode='HTML'
            )
        else:
            await query.edit_message_caption(
                TEXTS[lang]["help_text"],
                parse_mode='HTML'
            )
        await asyncio.sleep(5)
        await send_main_menu(query.message.chat_id, context, query.message.message_id, lang)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "change_language":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")],
            [InlineKeyboardButton("üá¨üáß English", callback_data="set_lang_en")]
        ])
        
        current_lang = context.user_data.get("lang", "ru")
        await query.edit_message_media(
            media=InputMediaPhoto(
                media=LANGUAGE_PHOTO,
                caption=TEXTS[current_lang]["choose_language"],
                parse_mode='HTML'
            ),
            reply_markup=keyboard
        )
        return
    
    if query.data.startswith("set_lang_"):
        lang = query.data.split("_")[-1]
        context.user_data["lang"] = lang
        await send_main_menu(query.message.chat_id, context, query.message.message_id, lang)
        return
    
    if "_" in query.data:
        action, lang = query.data.split("_", 1)
    else:
        action = query.data
        lang = context.user_data.get("lang", "ru")
    
    if action == "compliment":
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id
            )
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<code>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª–∏–Ω–∞</code>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>3 12</code>",
            parse_mode='HTML'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        context.user_data['waiting_for_password_params'] = True
        context.user_data['lang'] = lang
        
    elif action == "fact":
        fact = random.choice(FACTS[lang])
        if query.message.photo:
            await query.edit_message_caption(
                caption=f"{TEXTS[lang]['fact_title']}\n\n{fact}",
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text(
                f"{TEXTS[lang]['fact_title']}\n\n{fact}",
                parse_mode='HTML'
            )
        await asyncio.sleep(3)
        await send_main_menu(query.message.chat_id, context, query.message.message_id, lang)
        
    elif action == "rate":
        await show_rating_menu(query, context, lang)
        
    elif action == "help":
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É
        average_rating, rating_count = get_average_rating()
        
        if query.message.photo:
            await query.edit_message_caption(
                caption=TEXTS[lang]["help_text"].format(
                    average_rating=average_rating,
                    rating_count=rating_count
                ),
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text(
                TEXTS[lang]["help_text"].format(
                    average_rating=average_rating,
                    rating_count=rating_count
                ),
                parse_mode='HTML'
            )
        await asyncio.sleep(5)
        await send_main_menu(query.message.chat_id, context, query.message.message_id, lang)

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞—Ä–æ–ª—è"""
    if 'waiting_for_password_params' in context.user_data and context.user_data['waiting_for_password_params']:
        try:
            parts = update.message.text.split()
            if len(parts) != 2:
                raise ValueError
            
            number = int(parts[0])
            length = int(parts[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if number <= 0 or length <= 0:
                raise ValueError
            if number > 20:
                await update.message.reply_text("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π - 20")
                return
            if length > 50:
                await update.message.reply_text("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è - 50 —Å–∏–º–≤–æ–ª–æ–≤")
                return
                
            lang = context.user_data.get('lang', 'ru')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏
            passwords = []
            for _ in range(number):
                password = ''.join([random.choice(chars) for _ in range(length)])
                passwords.append(password)
            
            result_text = f"{TEXTS[lang]['compliment_title']}\n\n" + "\n".join(passwords)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await update.message.reply_text(
                result_text,
                parse_mode=None
            )
            
            await asyncio.sleep(1)
            await send_main_menu(update.effective_chat.id, context)
            
        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª–∏–Ω–∞\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 3 12",
                parse_mode=None
            )
            return
        finally:
            context.user_data.pop('waiting_for_password_params', None)
    else:
        await send_main_menu(update.effective_chat.id, context)

async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏ –æ—Ü–µ–Ω–∫—É
    if "_" in query.data:
        rating_part, lang = query.data.rsplit("_", 1)
    else:
        rating_part = query.data
        lang = context.user_data.get("lang", "ru")
    
    if rating_part.startswith("rate"):
        stars = int(rating_part.replace("rate", ""))
        star_icons = "‚≠ê" * stars
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_rating(query.from_user.id, stars)
        
        if query.message.photo:
            await query.edit_message_caption(
                caption=TEXTS[lang]["thanks_rating"].format(stars=star_icons),
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text(
                TEXTS[lang]["thanks_rating"].format(stars=star_icons),
                parse_mode='HTML'
            )
        await asyncio.sleep(2)
        await send_main_menu(query.message.chat_id, context, query.message.message_id, lang)
    elif rating_part == "back":
        await send_main_menu(query.message.chat_id, context, query.message.message_id, lang)
#def main() -> None:
#    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
#    application = Application.builder().token(BOT_TOKEN).build()
#
#    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
#    application.add_handler(CommandHandler("start", start))
#    application.add_handler(CallbackQueryHandler(button_handler, pattern="^(set_lang_|compliment_|fact_|rate_|help_|back_|change_language)"))
#    application.add_handler(CallbackQueryHandler(handle_rating, pattern="^rate[1-5]_"))
#    
#    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
#    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, 
#                                        lambda u, c: send_main_menu(u.effective_chat.id, c)))
#
#    application.run_polling(allowed_updates=Update.ALL_TYPES)
#
#if __name__ == "__main__":
#    main()

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^(set_lang_|compliment_|fact_|rate_|help_|back_|change_language)"))
    application.add_handler(CallbackQueryHandler(handle_rating, pattern="^rate[1-5]_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))

    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()